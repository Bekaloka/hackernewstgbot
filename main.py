import os
import requests
import schedule
import time
import json
from bs4 import BeautifulSoup
from telegram import Bot
from datetime import datetime, timedelta

# === –ö–æ–Ω—Ñ–∏–≥ ===
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
TELEGRAM_CHANNEL = os.environ["TELEGRAM_CHANNEL"]
GEMINI_API_KEY = os.environ["GEMINI_API_KEY"]
TZ_OFFSET = int(os.environ.get("TZ_OFFSET", "5"))  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

POST_TIMES = ["09:00", "21:00"]  # –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
SEEN_FILE = "seen_posts.json"

bot = Bot(token=TELEGRAM_TOKEN)

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ ===
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen_ids):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen_ids), f)

seen_ids = load_seen()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π ===
def get_top_posts(limit=5):
    url = "https://news.ycombinator.com/"
    r = requests.get(url)
    soup = BeautifulSoup(r.text, "lxml")
    posts = []
    for item in soup.select(".athing")[:limit]:
        post_id = item["id"]
        title = item.select_one(".titleline a").text
        link = item.select_one(".titleline a")["href"]
        posts.append((post_id, title, link))
    return posts

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini ===
def generate_post(title, link):
    endpoint = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={GEMINI_API_KEY}"
    prompt = f"–°–¥–µ–ª–∞–π —Ü–µ–ø–ª—è—é—â–∏–π, –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram –ø–æ –Ω–æ–≤–æ—Å—Ç–∏: '{title}'. –°—Å—ã–ª–∫–∞: {link}."
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    try:
        r = requests.post(endpoint, json=payload)
        raw_text = r.json()["candidates"][0]["content"]["parts"][0]["text"].strip()
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        clean_text = raw_text.split("\n")[0]
        return clean_text
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ Gemini: {e}")
        return f"{title}\n{link}"

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
def post_to_telegram(text):
    try:
        bot.send_message(chat_id=TELEGRAM_CHANNEL, text=text, parse_mode="HTML")
        print(f"[‚úÖ] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {text[:60]}...")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ Telegram: {e}")

# === –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ===
def job():
    global seen_ids
    print(f"[üïí] –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ {datetime.utcnow()} UTC")
    for post_id, title, link in get_top_posts():
        if post_id in seen_ids:
            print(f"[‚è≠] –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –±—ã–ª–æ): {title}")
            continue
        text = generate_post(title, link)
        post_to_telegram(text)
        seen_ids.add(post_id)
        save_seen(seen_ids)
        break  # –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å –∑–∞ —Ä–∞–∑

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def schedule_jobs():
    for local_time in POST_TIMES:
        hours, minutes = map(int, local_time.split(":"))
        utc_time = (datetime(2000, 1, 1, hours, minutes) - timedelta(hours=TZ_OFFSET)).time()
        schedule.every().day.at(utc_time.strftime("%H:%M")).do(job)
        print(f"[‚è∞] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {local_time} (–ª–æ–∫–∞–ª—å–Ω–æ–µ) / {utc_time.strftime('%H:%M')} UTC")

if __name__ == "__main__":
    job()  # —Å—Ä–∞–∑—É –ø–æ—Å—Ç–∏–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    schedule_jobs()
    while True:
        schedule.run_pending()
        time.sleep(1)
