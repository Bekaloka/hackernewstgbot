import os
import requests
import schedule
import time
from bs4 import BeautifulSoup
from telegram import Bot
from datetime import datetime, timedelta

# === –ö–æ–Ω—Ñ–∏–≥ ===
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_CHANNEL = os.environ["TELEGRAM_CHANNEL"]  # @–∏–º—è_–∫–∞–Ω–∞–ª–∞
GEMINI_API_KEY = os.environ["GEMINI_API_KEY"]  # –∫–ª—é—á Gemini
TZ_OFFSET = int(os.environ.get("TZ_OFFSET", "5"))  # —Å–¥–≤–∏–≥ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +5)

POST_TIMES = ["09:00", "21:00"]  # –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏

bot = Bot(token=TELEGRAM_TOKEN)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π ===
def get_top_posts(limit=2):
    url = "https://news.ycombinator.com/"
    r = requests.get(url)
    soup = BeautifulSoup(r.text, "lxml")
    posts = []
    for item in soup.select(".athing")[:limit]:
        title = item.select_one(".titleline a").text
        link = item.select_one(".titleline a")["href"]
        posts.append((title, link))
    return posts

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini ===
def generate_post(title, link):
    endpoint = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={GEMINI_API_KEY}"
    prompt = f"–°–¥–µ–ª–∞–π –º–µ–º–Ω—ã–π, –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —Ü–µ–ø–ª—è—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram –ø–æ –Ω–æ–≤–æ—Å—Ç–∏: '{title}'. –°—Å—ã–ª–∫–∞: {link}"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    r = requests.post(endpoint, json=payload)
    try:
        return r.json()["candidates"][0]["content"]["parts"][0]["text"]
    except Exception:
        return f"{title}\n{link}"

# === –ü–æ—Å—Ç–∏–Ω–≥ –≤ Telegram ===
def post_to_telegram(text):
    bot.send_message(chat_id=TELEGRAM_CHANNEL, text=text, parse_mode="HTML")

# === –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def job():
    print(f"üöÄ –ü–æ—Å—Ç–∏–º –≤ {datetime.utcnow()} UTC")
    for title, link in get_top_posts():
        text = generate_post(title, link)
        post_to_telegram(text)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def schedule_jobs():
    for local_time in POST_TIMES:
        # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC
        hours, minutes = map(int, local_time.split(":"))
        utc_time = (datetime(2000, 1, 1, hours, minutes) - timedelta(hours=TZ_OFFSET)).time()
        schedule.every().day.at(utc_time.strftime("%H:%M")).do(job)
        print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {utc_time.strftime('%H:%M')} UTC ({local_time} –ø–æ –º–µ—Å—Ç–Ω–æ–º—É)")

if __name__ == "__main__":
    schedule_jobs()
    while True:
        schedule.run_pending()
        time.sleep(1)
